;; (require-package 'haskell-mode)
;; (require 'haskell-interactive-mode)
;; (require 'haskell-process)

;; (add-auto-mode 'haskell-mode "\\.hs$")
;; (setq haskell-font-lock-symbols t)
;; (setq haskell-program-name "ghci")
;; (defun haskell-unicode ()
;;  (substitute-patterns-with-unicode
;;   (list (cons "\\(<-\\)" 'left-arrow)
;;         (cons "\\(->\\)" 'right-arrow)
;;         (cons "\\(==\\)" 'identical)
;;         (cons "\\(/=\\)" 'not-identical)
;;         (cons "\\(()\\)" 'nil)
;;         (cons "\\<\\(sqrt\\)\\>" 'square-root)
;;         (cons "\\(&&\\)" 'logical-and)
;;         (cons "\\(||\\)" 'logical-or)
;;         (cons "\\<\\(not\\)\\>" 'logical-neg)
;;         (cons "\\(>\\)\\[^=\\]" 'greater-than)
;;         (cons "\\(<\\)\\[^=\\]" 'less-than)
;;         (cons "\\(>=\\)" 'greater-than-or-equal-to)
;;         (cons "\\(<=\\)" 'less-than-or-equal-to)
;;         (cons "\\<\\(alpha\\)\\>" 'alpha)
;;         (cons "\\<\\(beta\\)\\>" 'beta)
;;         (cons "\\<\\(gamma\\)\\>" 'gamma)
;;         (cons "\\<\\(delta\\)\\>" 'delta)
;;         (cons "\\(''\\)" 'double-prime)
;;         (cons "\\('\\)" 'prime)
;;         (cons "\\(!!\\)" 'double-exclamation)
;;         (cons "\\(\\.\\.\\)" 'horizontal-ellipsis))))

;; (add-hook 'haskell-mode-hook 'haskell-unicode)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;; (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(provide 'init-haskell)
